openapi: 3.0.0
info:
  version: 1.0.0
  title: Painting shop administration API
  description: Painting shop administration API
servers:
  - url: http://localhost:3000
paths:
  /artist:
    get:
      description: Returns a list of artist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of artist returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Creates a new artist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        '201':
          description: Artist has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artist/{_id}:
    get:
      description: Get an artist
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Returns an artist
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Artist'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates az artist
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        '200':
          description: Artist has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes an artist
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Artist has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Artist:
      type: object
      required:
        - fullName
      properties:
        fullName:
          type: string
        artistName:
          type: string
        otherInfo:
          type: string
    Customer:
      type: object
      required:
        - fullName
      properties:
        customer:
          type: string
        zip:
          type: string
        streetAddress:
          type: string
        country:
          type: string
        email:
          type: string
        password:
          type: string
    Order:
      type: object
      required:
        - customer
        - paintings
        - status
        - price
      properties:
        customer:
          type: object
          $ref: '#/components/schemas/Customer'
        paintings:
          type: array
          items: 
            $ref: '#/components/schemas/Painting'
        remark:
          type: string
        status:
          type: string
        bill:
          type: string
        billStatus:
          type: string
        price:
          type: number
    Painting:
      type: object
      required:
        - title
        - type
        - count
        - stock
      properties:
        artist:
          type: object
          $ref: '#/components/schemas/Artist'
        title:
          type: string
        type:
          type: string
        photos:
          type: array
          items: 
            $ref: '#/components/schemas/Photo'
        count:
          type: number
        stock:
          type: number
        price:
          type: number
    Photo:
      type: object
      required:
        - storedFileName
      properties:
        storedFileName:
          type: string
        alt:
          type: string
        fileSize:
          type: number
    User:
      type: object
      required:
        - email
      properties:
        email:
          type: string
        role:
          type: string
        password:
          type: string
    Error:
      type: object
      required:
        - message
        - error
      properties:
        message:
          type: string
        error:
          type: string
